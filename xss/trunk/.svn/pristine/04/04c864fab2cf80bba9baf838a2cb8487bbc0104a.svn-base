#!/usr/bin/env python
# -*- coding:utf-8 -*-
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import absolute_import
from __future__ import division

import argparse
import os
import logging


os.system("rm -fr build/AdPushMs")
os.system("unzip build/libs/AdPushMs-1.0.0-SNAPSHOT.war.original -d build/AdPushMs")
logger = logging.getLogger(__name__)

# 当前目录下被排除的文件
excludes = [
    "WEB-INF/classes/application.yml"
]

# 要同步的服务器
remotes = {
    "72": "root@120.76.101.72:/home/apps/AdPushMs/jetty/webapps/root/",
}

pwd = os.path.abspath(os.path.dirname(__file__))
if not pwd.endswith("/"):
    pwd = pwd + "/"
pwd = pwd + "build/AdPushMs/"

def sync_to_server(remote):
    logger.info("同步代码至 %s", remote)
    cmd = "rsync -e 'ssh -p 54322' -acvL {excludes} {local} {remote}"
    cmd = cmd.format(
        excludes = " ".join("--exclude \"{0}\"".format(pattern) for pattern in excludes),
        local = pwd,
        remote = remote,
    )
    logger.debug(cmd)
    os.system(cmd)



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='把代码同步到服务器。')
    parser.add_argument("names", metavar='server_name', nargs='*', help='服务器名称')
    parser.add_argument("--debug", "-d", action = "store_true")
    parser.add_argument("--allfiles", "-a", action = "store_true")
    args = parser.parse_args()
    
    if args.allfiles:
        excludes = []
    if args.debug:
        logging.basicConfig(level = logging.DEBUG)
    else:
        logging.basicConfig(level = logging.INFO)
    logger.name = "sync_to_servers"
    if not args.names:
        for remote in remotes.values():
            sync_to_server(remote)
    else:
        for name in args.names:
            remote = remotes[name]
            sync_to_server(remote)

